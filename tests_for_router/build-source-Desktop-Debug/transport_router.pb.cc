// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Graph_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopWithId_transport_5frouter_2eproto;
namespace transport_router_pb {
class StopWithIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopWithId> _instance;
} _StopWithId_default_instance_;
class TransportRouterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportRouter> _instance;
} _TransportRouter_default_instance_;
class RoutingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingSettings> _instance;
} _RoutingSettings_default_instance_;
}  // namespace transport_router_pb
static void InitDefaultsscc_info_RoutingSettings_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_router_pb::_RoutingSettings_default_instance_;
    new (ptr) ::transport_router_pb::RoutingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_router_pb::RoutingSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingSettings_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_StopWithId_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_router_pb::_StopWithId_default_instance_;
    new (ptr) ::transport_router_pb::StopWithId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_router_pb::StopWithId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopWithId_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopWithId_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_TransportRouter_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_router_pb::_TransportRouter_default_instance_;
    new (ptr) ::transport_router_pb::TransportRouter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_router_pb::TransportRouter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransportRouter_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransportRouter_transport_5frouter_2eproto}, {
      &scc_info_StopWithId_transport_5frouter_2eproto.base,
      &scc_info_Graph_graph_2eproto.base,
      &scc_info_RoutingSettings_transport_5frouter_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5frouter_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::StopWithId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::StopWithId, name_),
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::StopWithId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::TransportRouter, stop_with_ids_),
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::TransportRouter, graph_),
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::TransportRouter, routing_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::RoutingSettings, wait_time_),
  PROTOBUF_FIELD_OFFSET(::transport_router_pb::RoutingSettings, velocity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transport_router_pb::StopWithId)},
  { 7, -1, sizeof(::transport_router_pb::TransportRouter)},
  { 15, -1, sizeof(::transport_router_pb::RoutingSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_router_pb::_StopWithId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_router_pb::_TransportRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_router_pb::_RoutingSettings_default_instance_),
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\023transport_rout"
  "er_pb\032\013graph.proto\"&\n\nStopWithId\022\014\n\004name"
  "\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\"\251\001\n\017TransportRouter\0226"
  "\n\rstop_with_ids\030\001 \003(\0132\037.transport_router"
  "_pb.StopWithId\022\036\n\005graph\030\002 \001(\0132\017.graph_pb"
  ".Graph\022>\n\020routing_settings\030\003 \001(\0132$.trans"
  "port_router_pb.RoutingSettings\"6\n\017Routin"
  "gSettings\022\021\n\twait_time\030\001 \001(\005\022\020\n\010velocity"
  "\030\002 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5frouter_2eproto_deps[1] = {
  &::descriptor_table_graph_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5frouter_2eproto_sccs[3] = {
  &scc_info_RoutingSettings_transport_5frouter_2eproto.base,
  &scc_info_StopWithId_transport_5frouter_2eproto.base,
  &scc_info_TransportRouter_transport_5frouter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
  false, false, descriptor_table_protodef_transport_5frouter_2eproto, "transport_router.proto", 334,
  &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_sccs, descriptor_table_transport_5frouter_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
  file_level_metadata_transport_5frouter_2eproto, 3, file_level_enum_descriptors_transport_5frouter_2eproto, file_level_service_descriptors_transport_5frouter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5frouter_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5frouter_2eproto)), true);
namespace transport_router_pb {

// ===================================================================

void StopWithId::InitAsDefaultInstance() {
}
class StopWithId::_Internal {
 public:
};

StopWithId::StopWithId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_router_pb.StopWithId)
}
StopWithId::StopWithId(const StopWithId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:transport_router_pb.StopWithId)
}

void StopWithId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopWithId_transport_5frouter_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

StopWithId::~StopWithId() {
  // @@protoc_insertion_point(destructor:transport_router_pb.StopWithId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopWithId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopWithId::ArenaDtor(void* object) {
  StopWithId* _this = reinterpret_cast< StopWithId* >(object);
  (void)_this;
}
void StopWithId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopWithId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopWithId& StopWithId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopWithId_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void StopWithId::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_router_pb.StopWithId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopWithId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_router_pb.StopWithId.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopWithId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_router_pb.StopWithId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_router_pb.StopWithId.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_router_pb.StopWithId)
  return target;
}

size_t StopWithId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_router_pb.StopWithId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopWithId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_router_pb.StopWithId)
  GOOGLE_DCHECK_NE(&from, this);
  const StopWithId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopWithId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_router_pb.StopWithId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_router_pb.StopWithId)
    MergeFrom(*source);
  }
}

void StopWithId::MergeFrom(const StopWithId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_router_pb.StopWithId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void StopWithId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_router_pb.StopWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopWithId::CopyFrom(const StopWithId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_router_pb.StopWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopWithId::IsInitialized() const {
  return true;
}

void StopWithId::InternalSwap(StopWithId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopWithId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransportRouter::InitAsDefaultInstance() {
  ::transport_router_pb::_TransportRouter_default_instance_._instance.get_mutable()->graph_ = const_cast< ::graph_pb::Graph*>(
      ::graph_pb::Graph::internal_default_instance());
  ::transport_router_pb::_TransportRouter_default_instance_._instance.get_mutable()->routing_settings_ = const_cast< ::transport_router_pb::RoutingSettings*>(
      ::transport_router_pb::RoutingSettings::internal_default_instance());
}
class TransportRouter::_Internal {
 public:
  static const ::graph_pb::Graph& graph(const TransportRouter* msg);
  static const ::transport_router_pb::RoutingSettings& routing_settings(const TransportRouter* msg);
};

const ::graph_pb::Graph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->graph_;
}
const ::transport_router_pb::RoutingSettings&
TransportRouter::_Internal::routing_settings(const TransportRouter* msg) {
  return *msg->routing_settings_;
}
void TransportRouter::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stop_with_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_router_pb.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stop_with_ids_(from.stop_with_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    graph_ = new ::graph_pb::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_routing_settings()) {
    routing_settings_ = new ::transport_router_pb::RoutingSettings(*from.routing_settings_);
  } else {
    routing_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_router_pb.TransportRouter)
}

void TransportRouter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportRouter_transport_5frouter_2eproto.base);
  ::memset(&graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routing_settings_) -
      reinterpret_cast<char*>(&graph_)) + sizeof(routing_settings_));
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:transport_router_pb.TransportRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete routing_settings_;
}

void TransportRouter::ArenaDtor(void* object) {
  TransportRouter* _this = reinterpret_cast< TransportRouter* >(object);
  (void)_this;
}
void TransportRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportRouter& TransportRouter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportRouter_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_router_pb.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_with_ids_.Clear();
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArena() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .transport_router_pb.StopWithId stop_with_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_with_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .graph_pb.Graph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_router_pb.RoutingSettings routing_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_router_pb.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transport_router_pb.StopWithId stop_with_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_with_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stop_with_ids(i), target, stream);
  }

  // .graph_pb.Graph graph = 2;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph(this), target, stream);
  }

  // .transport_router_pb.RoutingSettings routing_settings = 3;
  if (this->has_routing_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::routing_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_router_pb.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_router_pb.TransportRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_router_pb.StopWithId stop_with_ids = 1;
  total_size += 1UL * this->_internal_stop_with_ids_size();
  for (const auto& msg : this->stop_with_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .graph_pb.Graph graph = 2;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .transport_router_pb.RoutingSettings routing_settings = 3;
  if (this->has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_router_pb.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_router_pb.TransportRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_router_pb.TransportRouter)
    MergeFrom(*source);
  }
}

void TransportRouter::MergeFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_router_pb.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_with_ids_.MergeFrom(from.stop_with_ids_);
  if (from.has_graph()) {
    _internal_mutable_graph()->::graph_pb::Graph::MergeFrom(from._internal_graph());
  }
  if (from.has_routing_settings()) {
    _internal_mutable_routing_settings()->::transport_router_pb::RoutingSettings::MergeFrom(from._internal_routing_settings());
  }
}

void TransportRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_router_pb.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_router_pb.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stop_with_ids_.InternalSwap(&other->stop_with_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, routing_settings_)
      + sizeof(TransportRouter::routing_settings_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, graph_)>(
          reinterpret_cast<char*>(&graph_),
          reinterpret_cast<char*>(&other->graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingSettings::InitAsDefaultInstance() {
}
class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_router_pb.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:transport_router_pb.RoutingSettings)
}

void RoutingSettings::SharedCtor() {
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:transport_router_pb.RoutingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingSettings::ArenaDtor(void* object) {
  RoutingSettings* _this = reinterpret_cast< RoutingSettings* >(object);
  (void)_this;
}
void RoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingSettings& RoutingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingSettings_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_router_pb.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_router_pb.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wait_time = 1;
  if (this->wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wait_time(), target);
  }

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_router_pb.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_router_pb.RoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 wait_time = 1;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_router_pb.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_router_pb.RoutingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_router_pb.RoutingSettings)
    MergeFrom(*source);
  }
}

void RoutingSettings::MergeFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_router_pb.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (from.wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
}

void RoutingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_router_pb.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_router_pb.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, wait_time_)
      + sizeof(RoutingSettings::wait_time_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, velocity_)>(
          reinterpret_cast<char*>(&velocity_),
          reinterpret_cast<char*>(&other->velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_router_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_router_pb::StopWithId* Arena::CreateMaybeMessage< ::transport_router_pb::StopWithId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_router_pb::StopWithId >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_router_pb::TransportRouter* Arena::CreateMaybeMessage< ::transport_router_pb::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_router_pb::TransportRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_router_pb::RoutingSettings* Arena::CreateMaybeMessage< ::transport_router_pb::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_router_pb::RoutingSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
