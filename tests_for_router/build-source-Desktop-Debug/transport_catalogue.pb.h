// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_pb {
class Coordinates;
class CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distanse;
class DistanseDefaultTypeInternal;
extern DistanseDefaultTypeInternal _Distanse_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class RouteStats;
class RouteStatsDefaultTypeInternal;
extern RouteStatsDefaultTypeInternal _RouteStats_default_instance_;
class Stop;
class StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
class TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_pb::Coordinates* Arena::CreateMaybeMessage<::transport_catalogue_pb::Coordinates>(Arena*);
template<> ::transport_catalogue_pb::Distanse* Arena::CreateMaybeMessage<::transport_catalogue_pb::Distanse>(Arena*);
template<> ::transport_catalogue_pb::Route* Arena::CreateMaybeMessage<::transport_catalogue_pb::Route>(Arena*);
template<> ::transport_catalogue_pb::RouteStats* Arena::CreateMaybeMessage<::transport_catalogue_pb::RouteStats>(Arena*);
template<> ::transport_catalogue_pb::Stop* Arena::CreateMaybeMessage<::transport_catalogue_pb::Stop>(Arena*);
template<> ::transport_catalogue_pb::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_pb::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_pb {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {};
  virtual ~Coordinates();

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {};
  virtual ~Stop();

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesThroughFieldNumber = 3,
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
  };
  // repeated string routes_through = 3;
  int routes_through_size() const;
  private:
  int _internal_routes_through_size() const;
  public:
  void clear_routes_through();
  const std::string& routes_through(int index) const;
  std::string* mutable_routes_through(int index);
  void set_routes_through(int index, const std::string& value);
  void set_routes_through(int index, std::string&& value);
  void set_routes_through(int index, const char* value);
  void set_routes_through(int index, const char* value, size_t size);
  std::string* add_routes_through();
  void add_routes_through(const std::string& value);
  void add_routes_through(std::string&& value);
  void add_routes_through(const char* value);
  void add_routes_through(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& routes_through() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_routes_through();
  private:
  const std::string& _internal_routes_through(int index) const;
  std::string* _internal_add_routes_through();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_pb.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::transport_catalogue_pb::Coordinates& coordinates() const;
  ::transport_catalogue_pb::Coordinates* release_coordinates();
  ::transport_catalogue_pb::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::transport_catalogue_pb::Coordinates* coordinates);
  private:
  const ::transport_catalogue_pb::Coordinates& _internal_coordinates() const;
  ::transport_catalogue_pb::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::transport_catalogue_pb::Coordinates* coordinates);
  ::transport_catalogue_pb::Coordinates* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> routes_through_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::transport_catalogue_pb::Coordinates* coordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.Route) */ {
 public:
  inline Route() : Route(nullptr) {};
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kNameFieldNumber = 1,
    kCircularFieldNumber = 3,
  };
  // repeated string stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  const std::string& stops(int index) const;
  std::string* mutable_stops(int index);
  void set_stops(int index, const std::string& value);
  void set_stops(int index, std::string&& value);
  void set_stops(int index, const char* value);
  void set_stops(int index, const char* value, size_t size);
  std::string* add_stops();
  void add_stops(const std::string& value);
  void add_stops(std::string&& value);
  void add_stops(const char* value);
  void add_stops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stops();
  private:
  const std::string& _internal_stops(int index) const;
  std::string* _internal_add_stops();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool circular = 3;
  void clear_circular();
  bool circular() const;
  void set_circular(bool value);
  private:
  bool _internal_circular() const;
  void _internal_set_circular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool circular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RouteStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.RouteStats) */ {
 public:
  inline RouteStats() : RouteStats(nullptr) {};
  virtual ~RouteStats();

  RouteStats(const RouteStats& from);
  RouteStats(RouteStats&& from) noexcept
    : RouteStats() {
    *this = ::std::move(from);
  }

  inline RouteStats& operator=(const RouteStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteStats& operator=(RouteStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteStats* internal_default_instance() {
    return reinterpret_cast<const RouteStats*>(
               &_RouteStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteStats& a, RouteStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteStats* New() const final {
    return CreateMaybeMessage<RouteStats>(nullptr);
  }

  RouteStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteStats& from);
  void MergeFrom(const RouteStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.RouteStats";
  }
  protected:
  explicit RouteStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsCountFieldNumber = 1,
    kUniqueStopsCountFieldNumber = 2,
    kActualLengthFieldNumber = 3,
    kCurvatureFieldNumber = 4,
  };
  // int32 stops_count = 1;
  void clear_stops_count();
  ::PROTOBUF_NAMESPACE_ID::int32 stops_count() const;
  void set_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stops_count() const;
  void _internal_set_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unique_stops_count = 2;
  void clear_unique_stops_count();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_stops_count() const;
  void set_unique_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_stops_count() const;
  void _internal_set_unique_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double actual_length = 3;
  void clear_actual_length();
  double actual_length() const;
  void set_actual_length(double value);
  private:
  double _internal_actual_length() const;
  void _internal_set_actual_length(double value);
  public:

  // double curvature = 4;
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.RouteStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stops_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_stops_count_;
  double actual_length_;
  double curvature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distanse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.Distanse) */ {
 public:
  inline Distanse() : Distanse(nullptr) {};
  virtual ~Distanse();

  Distanse(const Distanse& from);
  Distanse(Distanse&& from) noexcept
    : Distanse() {
    *this = ::std::move(from);
  }

  inline Distanse& operator=(const Distanse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distanse& operator=(Distanse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distanse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distanse* internal_default_instance() {
    return reinterpret_cast<const Distanse*>(
               &_Distanse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Distanse& a, Distanse& b) {
    a.Swap(&b);
  }
  inline void Swap(Distanse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distanse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distanse* New() const final {
    return CreateMaybeMessage<Distanse>(nullptr);
  }

  Distanse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distanse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distanse& from);
  void MergeFrom(const Distanse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distanse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.Distanse";
  }
  protected:
  explicit Distanse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_to();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_to(
      std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // int32 distance = 3;
  void clear_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 distance() const;
  void set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distance() const;
  void _internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.Distanse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::int32 distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_pb.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {};
  virtual ~TransportCatalogue();

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalogue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return CreateMaybeMessage<TransportCatalogue>(nullptr);
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalogue& from);
  void MergeFrom(const TransportCatalogue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_pb.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kStopDistancesFieldNumber = 3,
    kTransportRouterFieldNumber = 4,
    kOutputSettingsFieldNumber = 5,
  };
  // repeated .transport_catalogue_pb.Route routes = 1;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::transport_catalogue_pb::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Route >*
      mutable_routes();
  private:
  const ::transport_catalogue_pb::Route& _internal_routes(int index) const;
  ::transport_catalogue_pb::Route* _internal_add_routes();
  public:
  const ::transport_catalogue_pb::Route& routes(int index) const;
  ::transport_catalogue_pb::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Route >&
      routes() const;

  // repeated .transport_catalogue_pb.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_pb::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_pb::Stop& _internal_stops(int index) const;
  ::transport_catalogue_pb::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_pb::Stop& stops(int index) const;
  ::transport_catalogue_pb::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Stop >&
      stops() const;

  // repeated .transport_catalogue_pb.Distanse stop_distances = 3;
  int stop_distances_size() const;
  private:
  int _internal_stop_distances_size() const;
  public:
  void clear_stop_distances();
  ::transport_catalogue_pb::Distanse* mutable_stop_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Distanse >*
      mutable_stop_distances();
  private:
  const ::transport_catalogue_pb::Distanse& _internal_stop_distances(int index) const;
  ::transport_catalogue_pb::Distanse* _internal_add_stop_distances();
  public:
  const ::transport_catalogue_pb::Distanse& stop_distances(int index) const;
  ::transport_catalogue_pb::Distanse* add_stop_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Distanse >&
      stop_distances() const;

  // .transport_router_pb.TransportRouter transport_router = 4;
  bool has_transport_router() const;
  private:
  bool _internal_has_transport_router() const;
  public:
  void clear_transport_router();
  const ::transport_router_pb::TransportRouter& transport_router() const;
  ::transport_router_pb::TransportRouter* release_transport_router();
  ::transport_router_pb::TransportRouter* mutable_transport_router();
  void set_allocated_transport_router(::transport_router_pb::TransportRouter* transport_router);
  private:
  const ::transport_router_pb::TransportRouter& _internal_transport_router() const;
  ::transport_router_pb::TransportRouter* _internal_mutable_transport_router();
  public:
  void unsafe_arena_set_allocated_transport_router(
      ::transport_router_pb::TransportRouter* transport_router);
  ::transport_router_pb::TransportRouter* unsafe_arena_release_transport_router();

  // .map_pb.OutputSettings output_settings = 5;
  bool has_output_settings() const;
  private:
  bool _internal_has_output_settings() const;
  public:
  void clear_output_settings();
  const ::map_pb::OutputSettings& output_settings() const;
  ::map_pb::OutputSettings* release_output_settings();
  ::map_pb::OutputSettings* mutable_output_settings();
  void set_allocated_output_settings(::map_pb::OutputSettings* output_settings);
  private:
  const ::map_pb::OutputSettings& _internal_output_settings() const;
  ::map_pb::OutputSettings* _internal_mutable_output_settings();
  public:
  void unsafe_arena_set_allocated_output_settings(
      ::map_pb::OutputSettings* output_settings);
  ::map_pb::OutputSettings* unsafe_arena_release_output_settings();

  // @@protoc_insertion_point(class_scope:transport_catalogue_pb.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Route > routes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Stop > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Distanse > stop_distances_;
  ::transport_router_pb::TransportRouter* transport_router_;
  ::map_pb::OutputSettings* output_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Stop.name)
  return _internal_name();
}
inline void Stop::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Stop.name)
}
inline std::string* Stop::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Stop.name)
  return _internal_mutable_name();
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Stop::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_pb.Stop.name)
}
inline void Stop::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Stop.name)
}
inline void Stop::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Stop.name)
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.Stop.name)
}
inline std::string* Stop::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_pb.Stop.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.Stop.name)
}

// .transport_catalogue_pb.Coordinates coordinates = 2;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
inline const ::transport_catalogue_pb::Coordinates& Stop::_internal_coordinates() const {
  const ::transport_catalogue_pb::Coordinates* p = coordinates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_catalogue_pb::Coordinates*>(
      &::transport_catalogue_pb::_Coordinates_default_instance_);
}
inline const ::transport_catalogue_pb::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::transport_catalogue_pb::Coordinates* coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates_);
  }
  coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.Stop.coordinates)
}
inline ::transport_catalogue_pb::Coordinates* Stop::release_coordinates() {
  auto temp = unsafe_arena_release_coordinates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_pb::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.Stop.coordinates)
  
  ::transport_catalogue_pb::Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::transport_catalogue_pb::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_pb::Coordinates>(GetArena());
    coordinates_ = p;
  }
  return coordinates_;
}
inline ::transport_catalogue_pb::Coordinates* Stop::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Stop.coordinates)
  return _internal_mutable_coordinates();
}
inline void Stop::set_allocated_coordinates(::transport_catalogue_pb::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.Stop.coordinates)
}

// repeated string routes_through = 3;
inline int Stop::_internal_routes_through_size() const {
  return routes_through_.size();
}
inline int Stop::routes_through_size() const {
  return _internal_routes_through_size();
}
inline void Stop::clear_routes_through() {
  routes_through_.Clear();
}
inline std::string* Stop::add_routes_through() {
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_pb.Stop.routes_through)
  return _internal_add_routes_through();
}
inline const std::string& Stop::_internal_routes_through(int index) const {
  return routes_through_.Get(index);
}
inline const std::string& Stop::routes_through(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Stop.routes_through)
  return _internal_routes_through(index);
}
inline std::string* Stop::mutable_routes_through(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Stop.routes_through)
  return routes_through_.Mutable(index);
}
inline void Stop::set_routes_through(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Stop.routes_through)
  routes_through_.Mutable(index)->assign(value);
}
inline void Stop::set_routes_through(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Stop.routes_through)
  routes_through_.Mutable(index)->assign(std::move(value));
}
inline void Stop::set_routes_through(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routes_through_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Stop.routes_through)
}
inline void Stop::set_routes_through(int index, const char* value, size_t size) {
  routes_through_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Stop.routes_through)
}
inline std::string* Stop::_internal_add_routes_through() {
  return routes_through_.Add();
}
inline void Stop::add_routes_through(const std::string& value) {
  routes_through_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.Stop.routes_through)
}
inline void Stop::add_routes_through(std::string&& value) {
  routes_through_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.Stop.routes_through)
}
inline void Stop::add_routes_through(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routes_through_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_pb.Stop.routes_through)
}
inline void Stop::add_routes_through(const char* value, size_t size) {
  routes_through_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_pb.Stop.routes_through)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stop::routes_through() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_pb.Stop.routes_through)
  return routes_through_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stop::mutable_routes_through() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_pb.Stop.routes_through)
  return &routes_through_;
}

// -------------------------------------------------------------------

// Route

// string name = 1;
inline void Route::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Route.name)
  return _internal_name();
}
inline void Route::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Route.name)
}
inline std::string* Route::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Route.name)
  return _internal_mutable_name();
}
inline const std::string& Route::_internal_name() const {
  return name_.Get();
}
inline void Route::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Route::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_pb.Route.name)
}
inline void Route::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Route.name)
}
inline void Route::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Route.name)
}
inline std::string* Route::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.Route.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Route::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.Route.name)
}
inline std::string* Route::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_pb.Route.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Route::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.Route.name)
}

// repeated string stops = 2;
inline int Route::_internal_stops_size() const {
  return stops_.size();
}
inline int Route::stops_size() const {
  return _internal_stops_size();
}
inline void Route::clear_stops() {
  stops_.Clear();
}
inline std::string* Route::add_stops() {
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_pb.Route.stops)
  return _internal_add_stops();
}
inline const std::string& Route::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const std::string& Route::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Route.stops)
  return _internal_stops(index);
}
inline std::string* Route::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Route.stops)
  return stops_.Mutable(index);
}
inline void Route::set_stops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Route.stops)
  stops_.Mutable(index)->assign(value);
}
inline void Route::set_stops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Route.stops)
  stops_.Mutable(index)->assign(std::move(value));
}
inline void Route::set_stops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Route.stops)
}
inline void Route::set_stops(int index, const char* value, size_t size) {
  stops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Route.stops)
}
inline std::string* Route::_internal_add_stops() {
  return stops_.Add();
}
inline void Route::add_stops(const std::string& value) {
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.Route.stops)
}
inline void Route::add_stops(std::string&& value) {
  stops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.Route.stops)
}
inline void Route::add_stops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_pb.Route.stops)
}
inline void Route::add_stops(const char* value, size_t size) {
  stops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_pb.Route.stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Route::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_pb.Route.stops)
  return stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Route::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_pb.Route.stops)
  return &stops_;
}

// bool circular = 3;
inline void Route::clear_circular() {
  circular_ = false;
}
inline bool Route::_internal_circular() const {
  return circular_;
}
inline bool Route::circular() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Route.circular)
  return _internal_circular();
}
inline void Route::_internal_set_circular(bool value) {
  
  circular_ = value;
}
inline void Route::set_circular(bool value) {
  _internal_set_circular(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Route.circular)
}

// -------------------------------------------------------------------

// RouteStats

// int32 stops_count = 1;
inline void RouteStats::clear_stops_count() {
  stops_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteStats::_internal_stops_count() const {
  return stops_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteStats::stops_count() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.RouteStats.stops_count)
  return _internal_stops_count();
}
inline void RouteStats::_internal_set_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stops_count_ = value;
}
inline void RouteStats::set_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stops_count(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.RouteStats.stops_count)
}

// int32 unique_stops_count = 2;
inline void RouteStats::clear_unique_stops_count() {
  unique_stops_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteStats::_internal_unique_stops_count() const {
  return unique_stops_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteStats::unique_stops_count() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.RouteStats.unique_stops_count)
  return _internal_unique_stops_count();
}
inline void RouteStats::_internal_set_unique_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_stops_count_ = value;
}
inline void RouteStats::set_unique_stops_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_stops_count(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.RouteStats.unique_stops_count)
}

// double actual_length = 3;
inline void RouteStats::clear_actual_length() {
  actual_length_ = 0;
}
inline double RouteStats::_internal_actual_length() const {
  return actual_length_;
}
inline double RouteStats::actual_length() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.RouteStats.actual_length)
  return _internal_actual_length();
}
inline void RouteStats::_internal_set_actual_length(double value) {
  
  actual_length_ = value;
}
inline void RouteStats::set_actual_length(double value) {
  _internal_set_actual_length(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.RouteStats.actual_length)
}

// double curvature = 4;
inline void RouteStats::clear_curvature() {
  curvature_ = 0;
}
inline double RouteStats::_internal_curvature() const {
  return curvature_;
}
inline double RouteStats::curvature() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.RouteStats.curvature)
  return _internal_curvature();
}
inline void RouteStats::_internal_set_curvature(double value) {
  
  curvature_ = value;
}
inline void RouteStats::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.RouteStats.curvature)
}

// -------------------------------------------------------------------

// Distanse

// string from = 1;
inline void Distanse::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Distanse::from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Distanse.from)
  return _internal_from();
}
inline void Distanse::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Distanse.from)
}
inline std::string* Distanse::mutable_from() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Distanse.from)
  return _internal_mutable_from();
}
inline const std::string& Distanse::_internal_from() const {
  return from_.Get();
}
inline void Distanse::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distanse::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_pb.Distanse.from)
}
inline void Distanse::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Distanse.from)
}
inline void Distanse::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Distanse.from)
}
inline std::string* Distanse::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distanse::release_from() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.Distanse.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distanse::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.Distanse.from)
}
inline std::string* Distanse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_pb.Distanse.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Distanse::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.Distanse.from)
}

// string to = 2;
inline void Distanse::clear_to() {
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Distanse::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Distanse.to)
  return _internal_to();
}
inline void Distanse::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Distanse.to)
}
inline std::string* Distanse::mutable_to() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.Distanse.to)
  return _internal_mutable_to();
}
inline const std::string& Distanse::_internal_to() const {
  return to_.Get();
}
inline void Distanse::_internal_set_to(const std::string& value) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distanse::set_to(std::string&& value) {
  
  to_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_pb.Distanse.to)
}
inline void Distanse::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_pb.Distanse.to)
}
inline void Distanse::set_to(const char* value,
    size_t size) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_pb.Distanse.to)
}
inline std::string* Distanse::_internal_mutable_to() {
  
  return to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distanse::release_to() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.Distanse.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distanse::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.Distanse.to)
}
inline std::string* Distanse::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_pb.Distanse.to)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return to_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Distanse::unsafe_arena_set_allocated_to(
    std::string* to) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (to != nullptr) {
    
  } else {
    
  }
  to_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      to, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.Distanse.to)
}

// int32 distance = 3;
inline void Distanse::clear_distance() {
  distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distanse::_internal_distance() const {
  return distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Distanse::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.Distanse.distance)
  return _internal_distance();
}
inline void Distanse::_internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distance_ = value;
}
inline void Distanse::set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_pb.Distanse.distance)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .transport_catalogue_pb.Route routes = 1;
inline int TransportCatalogue::_internal_routes_size() const {
  return routes_.size();
}
inline int TransportCatalogue::routes_size() const {
  return _internal_routes_size();
}
inline void TransportCatalogue::clear_routes() {
  routes_.Clear();
}
inline ::transport_catalogue_pb::Route* TransportCatalogue::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.TransportCatalogue.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Route >*
TransportCatalogue::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_pb.TransportCatalogue.routes)
  return &routes_;
}
inline const ::transport_catalogue_pb::Route& TransportCatalogue::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::transport_catalogue_pb::Route& TransportCatalogue::routes(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.TransportCatalogue.routes)
  return _internal_routes(index);
}
inline ::transport_catalogue_pb::Route* TransportCatalogue::_internal_add_routes() {
  return routes_.Add();
}
inline ::transport_catalogue_pb::Route* TransportCatalogue::add_routes() {
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.TransportCatalogue.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Route >&
TransportCatalogue::routes() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_pb.TransportCatalogue.routes)
  return routes_;
}

// repeated .transport_catalogue_pb.Stop stops = 2;
inline int TransportCatalogue::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  stops_.Clear();
}
inline ::transport_catalogue_pb::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.TransportCatalogue.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_pb.TransportCatalogue.stops)
  return &stops_;
}
inline const ::transport_catalogue_pb::Stop& TransportCatalogue::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::transport_catalogue_pb::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_pb::Stop* TransportCatalogue::_internal_add_stops() {
  return stops_.Add();
}
inline ::transport_catalogue_pb::Stop* TransportCatalogue::add_stops() {
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.TransportCatalogue.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_pb.TransportCatalogue.stops)
  return stops_;
}

// repeated .transport_catalogue_pb.Distanse stop_distances = 3;
inline int TransportCatalogue::_internal_stop_distances_size() const {
  return stop_distances_.size();
}
inline int TransportCatalogue::stop_distances_size() const {
  return _internal_stop_distances_size();
}
inline void TransportCatalogue::clear_stop_distances() {
  stop_distances_.Clear();
}
inline ::transport_catalogue_pb::Distanse* TransportCatalogue::mutable_stop_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.TransportCatalogue.stop_distances)
  return stop_distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Distanse >*
TransportCatalogue::mutable_stop_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_pb.TransportCatalogue.stop_distances)
  return &stop_distances_;
}
inline const ::transport_catalogue_pb::Distanse& TransportCatalogue::_internal_stop_distances(int index) const {
  return stop_distances_.Get(index);
}
inline const ::transport_catalogue_pb::Distanse& TransportCatalogue::stop_distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.TransportCatalogue.stop_distances)
  return _internal_stop_distances(index);
}
inline ::transport_catalogue_pb::Distanse* TransportCatalogue::_internal_add_stop_distances() {
  return stop_distances_.Add();
}
inline ::transport_catalogue_pb::Distanse* TransportCatalogue::add_stop_distances() {
  // @@protoc_insertion_point(field_add:transport_catalogue_pb.TransportCatalogue.stop_distances)
  return _internal_add_stop_distances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_pb::Distanse >&
TransportCatalogue::stop_distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_pb.TransportCatalogue.stop_distances)
  return stop_distances_;
}

// .transport_router_pb.TransportRouter transport_router = 4;
inline bool TransportCatalogue::_internal_has_transport_router() const {
  return this != internal_default_instance() && transport_router_ != nullptr;
}
inline bool TransportCatalogue::has_transport_router() const {
  return _internal_has_transport_router();
}
inline const ::transport_router_pb::TransportRouter& TransportCatalogue::_internal_transport_router() const {
  const ::transport_router_pb::TransportRouter* p = transport_router_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_router_pb::TransportRouter*>(
      &::transport_router_pb::_TransportRouter_default_instance_);
}
inline const ::transport_router_pb::TransportRouter& TransportCatalogue::transport_router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.TransportCatalogue.transport_router)
  return _internal_transport_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_transport_router(
    ::transport_router_pb::TransportRouter* transport_router) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  transport_router_ = transport_router;
  if (transport_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.TransportCatalogue.transport_router)
}
inline ::transport_router_pb::TransportRouter* TransportCatalogue::release_transport_router() {
  auto temp = unsafe_arena_release_transport_router();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_router_pb::TransportRouter* TransportCatalogue::unsafe_arena_release_transport_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.TransportCatalogue.transport_router)
  
  ::transport_router_pb::TransportRouter* temp = transport_router_;
  transport_router_ = nullptr;
  return temp;
}
inline ::transport_router_pb::TransportRouter* TransportCatalogue::_internal_mutable_transport_router() {
  
  if (transport_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_router_pb::TransportRouter>(GetArena());
    transport_router_ = p;
  }
  return transport_router_;
}
inline ::transport_router_pb::TransportRouter* TransportCatalogue::mutable_transport_router() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.TransportCatalogue.transport_router)
  return _internal_mutable_transport_router();
}
inline void TransportCatalogue::set_allocated_transport_router(::transport_router_pb::TransportRouter* transport_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  if (transport_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router)->GetArena();
    if (message_arena != submessage_arena) {
      transport_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_router, submessage_arena);
    }
    
  } else {
    
  }
  transport_router_ = transport_router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.TransportCatalogue.transport_router)
}

// .map_pb.OutputSettings output_settings = 5;
inline bool TransportCatalogue::_internal_has_output_settings() const {
  return this != internal_default_instance() && output_settings_ != nullptr;
}
inline bool TransportCatalogue::has_output_settings() const {
  return _internal_has_output_settings();
}
inline const ::map_pb::OutputSettings& TransportCatalogue::_internal_output_settings() const {
  const ::map_pb::OutputSettings* p = output_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_pb::OutputSettings*>(
      &::map_pb::_OutputSettings_default_instance_);
}
inline const ::map_pb::OutputSettings& TransportCatalogue::output_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_pb.TransportCatalogue.output_settings)
  return _internal_output_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_output_settings(
    ::map_pb::OutputSettings* output_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_settings_);
  }
  output_settings_ = output_settings;
  if (output_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_pb.TransportCatalogue.output_settings)
}
inline ::map_pb::OutputSettings* TransportCatalogue::release_output_settings() {
  auto temp = unsafe_arena_release_output_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_pb::OutputSettings* TransportCatalogue::unsafe_arena_release_output_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_pb.TransportCatalogue.output_settings)
  
  ::map_pb::OutputSettings* temp = output_settings_;
  output_settings_ = nullptr;
  return temp;
}
inline ::map_pb::OutputSettings* TransportCatalogue::_internal_mutable_output_settings() {
  
  if (output_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_pb::OutputSettings>(GetArena());
    output_settings_ = p;
  }
  return output_settings_;
}
inline ::map_pb::OutputSettings* TransportCatalogue::mutable_output_settings() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_pb.TransportCatalogue.output_settings)
  return _internal_mutable_output_settings();
}
inline void TransportCatalogue::set_allocated_output_settings(::map_pb::OutputSettings* output_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_settings_);
  }
  if (output_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_settings)->GetArena();
    if (message_arena != submessage_arena) {
      output_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_settings, submessage_arena);
    }
    
  } else {
    
  }
  output_settings_ = output_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_pb.TransportCatalogue.output_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
