// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputSettings_map_5frenderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distanse_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stop_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransportRouter_transport_5frouter_2eproto;
namespace transport_catalogue_pb {
class CoordinatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinates> _instance;
} _Coordinates_default_instance_;
class StopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stop> _instance;
} _Stop_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class RouteStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteStats> _instance;
} _RouteStats_default_instance_;
class DistanseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distanse> _instance;
} _Distanse_default_instance_;
class TransportCatalogueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalogue> _instance;
} _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_pb
static void InitDefaultsscc_info_Coordinates_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_Coordinates_default_instance_;
    new (ptr) ::transport_catalogue_pb::Coordinates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::Coordinates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coordinates_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Distanse_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_Distanse_default_instance_;
    new (ptr) ::transport_catalogue_pb::Distanse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::Distanse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distanse_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distanse_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Route_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_Route_default_instance_;
    new (ptr) ::transport_catalogue_pb::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Route_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_RouteStats_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_RouteStats_default_instance_;
    new (ptr) ::transport_catalogue_pb::RouteStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::RouteStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteStats_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteStats_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Stop_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_Stop_default_instance_;
    new (ptr) ::transport_catalogue_pb::Stop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::Stop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stop_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stop_transport_5fcatalogue_2eproto}, {
      &scc_info_Coordinates_transport_5fcatalogue_2eproto.base,}};

static void InitDefaultsscc_info_TransportCatalogue_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transport_catalogue_pb::_TransportCatalogue_default_instance_;
    new (ptr) ::transport_catalogue_pb::TransportCatalogue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transport_catalogue_pb::TransportCatalogue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TransportCatalogue_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TransportCatalogue_transport_5fcatalogue_2eproto}, {
      &scc_info_Route_transport_5fcatalogue_2eproto.base,
      &scc_info_Stop_transport_5fcatalogue_2eproto.base,
      &scc_info_Distanse_transport_5fcatalogue_2eproto.base,
      &scc_info_TransportRouter_transport_5frouter_2eproto.base,
      &scc_info_OutputSettings_map_5frenderer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalogue_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Coordinates, lat_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Coordinates, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Stop, name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Stop, coordinates_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Stop, routes_through_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Route, name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Route, stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Route, circular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::RouteStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::RouteStats, stops_count_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::RouteStats, unique_stops_count_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::RouteStats, actual_length_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::RouteStats, curvature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Distanse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Distanse, from_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Distanse, to_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::Distanse, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, routes_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, stop_distances_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, transport_router_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_pb::TransportCatalogue, output_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transport_catalogue_pb::Coordinates)},
  { 7, -1, sizeof(::transport_catalogue_pb::Stop)},
  { 15, -1, sizeof(::transport_catalogue_pb::Route)},
  { 23, -1, sizeof(::transport_catalogue_pb::RouteStats)},
  { 32, -1, sizeof(::transport_catalogue_pb::Distanse)},
  { 40, -1, sizeof(::transport_catalogue_pb::TransportCatalogue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_Coordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_RouteStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_Distanse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_pb::_TransportCatalogue_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\026transport_c"
  "atalogue_pb\032\022map_renderer.proto\032\026transpo"
  "rt_router.proto\"\'\n\013Coordinates\022\013\n\003lat\030\001 "
  "\001(\001\022\013\n\003lng\030\002 \001(\001\"f\n\004Stop\022\014\n\004name\030\001 \001(\t\0228"
  "\n\013coordinates\030\002 \001(\0132#.transport_catalogu"
  "e_pb.Coordinates\022\026\n\016routes_through\030\003 \003(\t"
  "\"6\n\005Route\022\014\n\004name\030\001 \001(\t\022\r\n\005stops\030\002 \003(\t\022\020"
  "\n\010circular\030\003 \001(\010\"g\n\nRouteStats\022\023\n\013stops_"
  "count\030\001 \001(\005\022\032\n\022unique_stops_count\030\002 \001(\005\022"
  "\025\n\ractual_length\030\003 \001(\001\022\021\n\tcurvature\030\004 \001("
  "\001\"6\n\010Distanse\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022"
  "\020\n\010distance\030\003 \001(\005\"\233\002\n\022TransportCatalogue"
  "\022-\n\006routes\030\001 \003(\0132\035.transport_catalogue_p"
  "b.Route\022+\n\005stops\030\002 \003(\0132\034.transport_catal"
  "ogue_pb.Stop\0228\n\016stop_distances\030\003 \003(\0132 .t"
  "ransport_catalogue_pb.Distanse\022>\n\020transp"
  "ort_router\030\004 \001(\0132$.transport_router_pb.T"
  "ransportRouter\022/\n\017output_settings\030\005 \001(\0132"
  "\026.map_pb.OutputSettingsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalogue_2eproto_deps[2] = {
  &::descriptor_table_map_5frenderer_2eproto,
  &::descriptor_table_transport_5frouter_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalogue_2eproto_sccs[6] = {
  &scc_info_Coordinates_transport_5fcatalogue_2eproto.base,
  &scc_info_Distanse_transport_5fcatalogue_2eproto.base,
  &scc_info_Route_transport_5fcatalogue_2eproto.base,
  &scc_info_RouteStats_transport_5fcatalogue_2eproto.base,
  &scc_info_Stop_transport_5fcatalogue_2eproto.base,
  &scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
  false, false, descriptor_table_protodef_transport_5fcatalogue_2eproto, "transport_catalogue.proto", 751,
  &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_sccs, descriptor_table_transport_5fcatalogue_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
  file_level_metadata_transport_5fcatalogue_2eproto, 6, file_level_enum_descriptors_transport_5fcatalogue_2eproto, file_level_service_descriptors_transport_5fcatalogue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalogue_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalogue_2eproto)), true);
namespace transport_catalogue_pb {

// ===================================================================

void Coordinates::InitAsDefaultInstance() {
}
class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.Coordinates)
}

void Coordinates::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.Coordinates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinates::ArenaDtor(void* object) {
  Coordinates* _this = reinterpret_cast< Coordinates* >(object);
  (void)_this;
}
void Coordinates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinates& Coordinates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinates_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.Coordinates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.Coordinates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.Coordinates)
    MergeFrom(*source);
  }
}

void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lng() <= 0 && from.lng() >= 0)) {
    _internal_set_lng(from._internal_lng());
  }
}

void Coordinates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, lng_)
      + sizeof(Coordinates::lng_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stop::InitAsDefaultInstance() {
  ::transport_catalogue_pb::_Stop_default_instance_._instance.get_mutable()->coordinates_ = const_cast< ::transport_catalogue_pb::Coordinates*>(
      ::transport_catalogue_pb::Coordinates::internal_default_instance());
}
class Stop::_Internal {
 public:
  static const ::transport_catalogue_pb::Coordinates& coordinates(const Stop* msg);
};

const ::transport_catalogue_pb::Coordinates&
Stop::_Internal::coordinates(const Stop* msg) {
  return *msg->coordinates_;
}
Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_through_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_through_(from.routes_through_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_coordinates()) {
    coordinates_ = new ::transport_catalogue_pb::Coordinates(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.Stop)
}

void Stop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stop_transport_5fcatalogue_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coordinates_ = nullptr;
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.Stop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinates_;
}

void Stop::ArenaDtor(void* object) {
  Stop* _this = reinterpret_cast< Stop* >(object);
  (void)_this;
}
void Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stop& Stop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stop_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_through_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Stop.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_pb.Coordinates coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string routes_through = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_routes_through();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Stop.routes_through"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Stop.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .transport_catalogue_pb.Coordinates coordinates = 2;
  if (this->has_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinates(this), target, stream);
  }

  // repeated string routes_through = 3;
  for (int i = 0, n = this->_internal_routes_through_size(); i < n; i++) {
    const auto& s = this->_internal_routes_through(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Stop.routes_through");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string routes_through = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(routes_through_.size());
  for (int i = 0, n = routes_through_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      routes_through_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .transport_catalogue_pb.Coordinates coordinates = 2;
  if (this->has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.Stop)
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_through_.MergeFrom(from.routes_through_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_coordinates()) {
    _internal_mutable_coordinates()->::transport_catalogue_pb::Coordinates::MergeFrom(from._internal_coordinates());
  }
}

void Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_through_.InternalSwap(&other->routes_through_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(coordinates_, other->coordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  circular_ = from.circular_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_transport_5fcatalogue_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  circular_ = false;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Route::ArenaDtor(void* object) {
  Route* _this = reinterpret_cast< Route* >(object);
  (void)_this;
}
void Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  circular_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Route.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Route.stops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool circular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          circular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Route.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string stops = 2;
  for (int i = 0, n = this->_internal_stops_size(); i < n; i++) {
    const auto& s = this->_internal_stops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Route.stops");
    target = stream->WriteString(2, s, target);
  }

  // bool circular = 3;
  if (this->circular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_circular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stops = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stops_.size());
  for (int i = 0, n = stops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stops_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool circular = 3;
  if (this->circular() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.circular() != 0) {
    _internal_set_circular(from._internal_circular());
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(circular_, other->circular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteStats::InitAsDefaultInstance() {
}
class RouteStats::_Internal {
 public:
};

RouteStats::RouteStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.RouteStats)
}
RouteStats::RouteStats(const RouteStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stops_count_, &from.stops_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvature_) -
    reinterpret_cast<char*>(&stops_count_)) + sizeof(curvature_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.RouteStats)
}

void RouteStats::SharedCtor() {
  ::memset(&stops_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&stops_count_)) + sizeof(curvature_));
}

RouteStats::~RouteStats() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.RouteStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteStats::ArenaDtor(void* object) {
  RouteStats* _this = reinterpret_cast< RouteStats* >(object);
  (void)_this;
}
void RouteStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteStats& RouteStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteStats_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void RouteStats::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.RouteStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stops_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&stops_count_)) + sizeof(curvature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stops_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unique_stops_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unique_stops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double actual_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          actual_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.RouteStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stops_count = 1;
  if (this->stops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stops_count(), target);
  }

  // int32 unique_stops_count = 2;
  if (this->unique_stops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unique_stops_count(), target);
  }

  // double actual_length = 3;
  if (!(this->actual_length() <= 0 && this->actual_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_actual_length(), target);
  }

  // double curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_curvature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.RouteStats)
  return target;
}

size_t RouteStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.RouteStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stops_count = 1;
  if (this->stops_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stops_count());
  }

  // int32 unique_stops_count = 2;
  if (this->unique_stops_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_stops_count());
  }

  // double actual_length = 3;
  if (!(this->actual_length() <= 0 && this->actual_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.RouteStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.RouteStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.RouteStats)
    MergeFrom(*source);
  }
}

void RouteStats::MergeFrom(const RouteStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.RouteStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stops_count() != 0) {
    _internal_set_stops_count(from._internal_stops_count());
  }
  if (from.unique_stops_count() != 0) {
    _internal_set_unique_stops_count(from._internal_unique_stops_count());
  }
  if (!(from.actual_length() <= 0 && from.actual_length() >= 0)) {
    _internal_set_actual_length(from._internal_actual_length());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    _internal_set_curvature(from._internal_curvature());
  }
}

void RouteStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.RouteStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteStats::CopyFrom(const RouteStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.RouteStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteStats::IsInitialized() const {
  return true;
}

void RouteStats::InternalSwap(RouteStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteStats, curvature_)
      + sizeof(RouteStats::curvature_)
      - PROTOBUF_FIELD_OFFSET(RouteStats, stops_count_)>(
          reinterpret_cast<char*>(&stops_count_),
          reinterpret_cast<char*>(&other->stops_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distanse::InitAsDefaultInstance() {
}
class Distanse::_Internal {
 public:
};

Distanse::Distanse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.Distanse)
}
Distanse::Distanse(const Distanse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.Distanse)
}

void Distanse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distanse_transport_5fcatalogue_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

Distanse::~Distanse() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.Distanse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Distanse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Distanse::ArenaDtor(void* object) {
  Distanse* _this = reinterpret_cast< Distanse* >(object);
  (void)_this;
}
void Distanse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distanse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distanse& Distanse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distanse_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Distanse::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.Distanse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distanse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Distanse.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_pb.Distanse.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distanse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.Distanse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Distanse.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_pb.Distanse.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // int32 distance = 3;
  if (this->distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.Distanse)
  return target;
}

size_t Distanse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.Distanse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // int32 distance = 3;
  if (this->distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distanse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.Distanse)
  GOOGLE_DCHECK_NE(&from, this);
  const Distanse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distanse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.Distanse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.Distanse)
    MergeFrom(*source);
  }
}

void Distanse::MergeFrom(const Distanse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.Distanse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
}

void Distanse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.Distanse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distanse::CopyFrom(const Distanse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.Distanse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distanse::IsInitialized() const {
  return true;
}

void Distanse::InternalSwap(Distanse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distanse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransportCatalogue::InitAsDefaultInstance() {
  ::transport_catalogue_pb::_TransportCatalogue_default_instance_._instance.get_mutable()->transport_router_ = const_cast< ::transport_router_pb::TransportRouter*>(
      ::transport_router_pb::TransportRouter::internal_default_instance());
  ::transport_catalogue_pb::_TransportCatalogue_default_instance_._instance.get_mutable()->output_settings_ = const_cast< ::map_pb::OutputSettings*>(
      ::map_pb::OutputSettings::internal_default_instance());
}
class TransportCatalogue::_Internal {
 public:
  static const ::transport_router_pb::TransportRouter& transport_router(const TransportCatalogue* msg);
  static const ::map_pb::OutputSettings& output_settings(const TransportCatalogue* msg);
};

const ::transport_router_pb::TransportRouter&
TransportCatalogue::_Internal::transport_router(const TransportCatalogue* msg) {
  return *msg->transport_router_;
}
const ::map_pb::OutputSettings&
TransportCatalogue::_Internal::output_settings(const TransportCatalogue* msg) {
  return *msg->output_settings_;
}
void TransportCatalogue::clear_transport_router() {
  if (GetArena() == nullptr && transport_router_ != nullptr) {
    delete transport_router_;
  }
  transport_router_ = nullptr;
}
void TransportCatalogue::clear_output_settings() {
  if (GetArena() == nullptr && output_settings_ != nullptr) {
    delete output_settings_;
  }
  output_settings_ = nullptr;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_(arena),
  stops_(arena),
  stop_distances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_pb.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_),
      stops_(from.stops_),
      stop_distances_(from.stop_distances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transport_router()) {
    transport_router_ = new ::transport_router_pb::TransportRouter(*from.transport_router_);
  } else {
    transport_router_ = nullptr;
  }
  if (from._internal_has_output_settings()) {
    output_settings_ = new ::map_pb::OutputSettings(*from.output_settings_);
  } else {
    output_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_pb.TransportCatalogue)
}

void TransportCatalogue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base);
  ::memset(&transport_router_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_settings_) -
      reinterpret_cast<char*>(&transport_router_)) + sizeof(output_settings_));
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:transport_catalogue_pb.TransportCatalogue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transport_router_;
  if (this != internal_default_instance()) delete output_settings_;
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  (void)_this;
}
void TransportCatalogue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalogue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalogue& TransportCatalogue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_pb.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  stops_.Clear();
  stop_distances_.Clear();
  if (GetArena() == nullptr && transport_router_ != nullptr) {
    delete transport_router_;
  }
  transport_router_ = nullptr;
  if (GetArena() == nullptr && output_settings_ != nullptr) {
    delete output_settings_;
  }
  output_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .transport_catalogue_pb.Route routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_pb.Stop stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_pb.Distanse stop_distances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .transport_router_pb.TransportRouter transport_router = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .map_pb.OutputSettings output_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalogue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_pb.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transport_catalogue_pb.Route routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  // repeated .transport_catalogue_pb.Stop stops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stops(i), target, stream);
  }

  // repeated .transport_catalogue_pb.Distanse stop_distances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_distances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stop_distances(i), target, stream);
  }

  // .transport_router_pb.TransportRouter transport_router = 4;
  if (this->has_transport_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transport_router(this), target, stream);
  }

  // .map_pb.OutputSettings output_settings = 5;
  if (this->has_output_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::output_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_pb.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_pb.TransportCatalogue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_pb.Route routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_pb.Stop stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_pb.Distanse stop_distances = 3;
  total_size += 1UL * this->_internal_stop_distances_size();
  for (const auto& msg : this->stop_distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_router_pb.TransportRouter transport_router = 4;
  if (this->has_transport_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_router_);
  }

  // .map_pb.OutputSettings output_settings = 5;
  if (this->has_output_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalogue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_pb.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalogue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalogue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_pb.TransportCatalogue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_pb.TransportCatalogue)
    MergeFrom(*source);
  }
}

void TransportCatalogue::MergeFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_pb.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  stops_.MergeFrom(from.stops_);
  stop_distances_.MergeFrom(from.stop_distances_);
  if (from.has_transport_router()) {
    _internal_mutable_transport_router()->::transport_router_pb::TransportRouter::MergeFrom(from._internal_transport_router());
  }
  if (from.has_output_settings()) {
    _internal_mutable_output_settings()->::map_pb::OutputSettings::MergeFrom(from._internal_output_settings());
  }
}

void TransportCatalogue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_pb.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_pb.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  stops_.InternalSwap(&other->stops_);
  stop_distances_.InternalSwap(&other->stop_distances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, output_settings_)
      + sizeof(TransportCatalogue::output_settings_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, transport_router_)>(
          reinterpret_cast<char*>(&transport_router_),
          reinterpret_cast<char*>(&other->transport_router_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalogue_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::Coordinates* Arena::CreateMaybeMessage< ::transport_catalogue_pb::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::Stop* Arena::CreateMaybeMessage< ::transport_catalogue_pb::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::Route* Arena::CreateMaybeMessage< ::transport_catalogue_pb::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::RouteStats* Arena::CreateMaybeMessage< ::transport_catalogue_pb::RouteStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::RouteStats >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::Distanse* Arena::CreateMaybeMessage< ::transport_catalogue_pb::Distanse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::Distanse >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_pb::TransportCatalogue* Arena::CreateMaybeMessage< ::transport_catalogue_pb::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_pb::TransportCatalogue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
