// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace transport_router_pb {
class RoutingSettings;
class RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopWithId;
class StopWithIdDefaultTypeInternal;
extern StopWithIdDefaultTypeInternal _StopWithId_default_instance_;
class TransportRouter;
class TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace transport_router_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_router_pb::RoutingSettings* Arena::CreateMaybeMessage<::transport_router_pb::RoutingSettings>(Arena*);
template<> ::transport_router_pb::StopWithId* Arena::CreateMaybeMessage<::transport_router_pb::StopWithId>(Arena*);
template<> ::transport_router_pb::TransportRouter* Arena::CreateMaybeMessage<::transport_router_pb::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_router_pb {

// ===================================================================

class StopWithId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_pb.StopWithId) */ {
 public:
  inline StopWithId() : StopWithId(nullptr) {};
  virtual ~StopWithId();

  StopWithId(const StopWithId& from);
  StopWithId(StopWithId&& from) noexcept
    : StopWithId() {
    *this = ::std::move(from);
  }

  inline StopWithId& operator=(const StopWithId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopWithId& operator=(StopWithId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopWithId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopWithId* internal_default_instance() {
    return reinterpret_cast<const StopWithId*>(
               &_StopWithId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopWithId& a, StopWithId& b) {
    a.Swap(&b);
  }
  inline void Swap(StopWithId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopWithId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopWithId* New() const final {
    return CreateMaybeMessage<StopWithId>(nullptr);
  }

  StopWithId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopWithId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopWithId& from);
  void MergeFrom(const StopWithId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopWithId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_pb.StopWithId";
  }
  protected:
  explicit StopWithId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5frouter_2eproto);
    return ::descriptor_table_transport_5frouter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_router_pb.StopWithId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_pb.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {};
  virtual ~TransportRouter();

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRouter* New() const final {
    return CreateMaybeMessage<TransportRouter>(nullptr);
  }

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportRouter& from);
  void MergeFrom(const TransportRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_pb.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5frouter_2eproto);
    return ::descriptor_table_transport_5frouter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopWithIdsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRoutingSettingsFieldNumber = 3,
  };
  // repeated .transport_router_pb.StopWithId stop_with_ids = 1;
  int stop_with_ids_size() const;
  private:
  int _internal_stop_with_ids_size() const;
  public:
  void clear_stop_with_ids();
  ::transport_router_pb::StopWithId* mutable_stop_with_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_pb::StopWithId >*
      mutable_stop_with_ids();
  private:
  const ::transport_router_pb::StopWithId& _internal_stop_with_ids(int index) const;
  ::transport_router_pb::StopWithId* _internal_add_stop_with_ids();
  public:
  const ::transport_router_pb::StopWithId& stop_with_ids(int index) const;
  ::transport_router_pb::StopWithId* add_stop_with_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_pb::StopWithId >&
      stop_with_ids() const;

  // .graph_pb.Graph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::graph_pb::Graph& graph() const;
  ::graph_pb::Graph* release_graph();
  ::graph_pb::Graph* mutable_graph();
  void set_allocated_graph(::graph_pb::Graph* graph);
  private:
  const ::graph_pb::Graph& _internal_graph() const;
  ::graph_pb::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::graph_pb::Graph* graph);
  ::graph_pb::Graph* unsafe_arena_release_graph();

  // .transport_router_pb.RoutingSettings routing_settings = 3;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::transport_router_pb::RoutingSettings& routing_settings() const;
  ::transport_router_pb::RoutingSettings* release_routing_settings();
  ::transport_router_pb::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::transport_router_pb::RoutingSettings* routing_settings);
  private:
  const ::transport_router_pb::RoutingSettings& _internal_routing_settings() const;
  ::transport_router_pb::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::transport_router_pb::RoutingSettings* routing_settings);
  ::transport_router_pb::RoutingSettings* unsafe_arena_release_routing_settings();

  // @@protoc_insertion_point(class_scope:transport_router_pb.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_pb::StopWithId > stop_with_ids_;
  ::graph_pb::Graph* graph_;
  ::transport_router_pb::RoutingSettings* routing_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_pb.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {};
  virtual ~RoutingSettings();

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return CreateMaybeMessage<RoutingSettings>(nullptr);
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingSettings& from);
  void MergeFrom(const RoutingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_pb.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5frouter_2eproto);
    return ::descriptor_table_transport_5frouter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 2,
    kWaitTimeFieldNumber = 1,
  };
  // double velocity = 2;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // int32 wait_time = 1;
  void clear_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time() const;
  void set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait_time() const;
  void _internal_set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_router_pb.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopWithId

// string name = 1;
inline void StopWithId::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopWithId::name() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.StopWithId.name)
  return _internal_name();
}
inline void StopWithId::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_router_pb.StopWithId.name)
}
inline std::string* StopWithId::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_router_pb.StopWithId.name)
  return _internal_mutable_name();
}
inline const std::string& StopWithId::_internal_name() const {
  return name_.Get();
}
inline void StopWithId::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopWithId::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_router_pb.StopWithId.name)
}
inline void StopWithId::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_router_pb.StopWithId.name)
}
inline void StopWithId::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_router_pb.StopWithId.name)
}
inline std::string* StopWithId::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopWithId::release_name() {
  // @@protoc_insertion_point(field_release:transport_router_pb.StopWithId.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopWithId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_router_pb.StopWithId.name)
}
inline std::string* StopWithId::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_router_pb.StopWithId.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopWithId::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_pb.StopWithId.name)
}

// int32 id = 2;
inline void StopWithId::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopWithId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopWithId::id() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.StopWithId.id)
  return _internal_id();
}
inline void StopWithId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void StopWithId::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_router_pb.StopWithId.id)
}

// -------------------------------------------------------------------

// TransportRouter

// repeated .transport_router_pb.StopWithId stop_with_ids = 1;
inline int TransportRouter::_internal_stop_with_ids_size() const {
  return stop_with_ids_.size();
}
inline int TransportRouter::stop_with_ids_size() const {
  return _internal_stop_with_ids_size();
}
inline void TransportRouter::clear_stop_with_ids() {
  stop_with_ids_.Clear();
}
inline ::transport_router_pb::StopWithId* TransportRouter::mutable_stop_with_ids(int index) {
  // @@protoc_insertion_point(field_mutable:transport_router_pb.TransportRouter.stop_with_ids)
  return stop_with_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_pb::StopWithId >*
TransportRouter::mutable_stop_with_ids() {
  // @@protoc_insertion_point(field_mutable_list:transport_router_pb.TransportRouter.stop_with_ids)
  return &stop_with_ids_;
}
inline const ::transport_router_pb::StopWithId& TransportRouter::_internal_stop_with_ids(int index) const {
  return stop_with_ids_.Get(index);
}
inline const ::transport_router_pb::StopWithId& TransportRouter::stop_with_ids(int index) const {
  // @@protoc_insertion_point(field_get:transport_router_pb.TransportRouter.stop_with_ids)
  return _internal_stop_with_ids(index);
}
inline ::transport_router_pb::StopWithId* TransportRouter::_internal_add_stop_with_ids() {
  return stop_with_ids_.Add();
}
inline ::transport_router_pb::StopWithId* TransportRouter::add_stop_with_ids() {
  // @@protoc_insertion_point(field_add:transport_router_pb.TransportRouter.stop_with_ids)
  return _internal_add_stop_with_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_pb::StopWithId >&
TransportRouter::stop_with_ids() const {
  // @@protoc_insertion_point(field_list:transport_router_pb.TransportRouter.stop_with_ids)
  return stop_with_ids_;
}

// .graph_pb.Graph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::graph_pb::Graph& TransportRouter::_internal_graph() const {
  const ::graph_pb::Graph* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::graph_pb::Graph*>(
      &::graph_pb::_Graph_default_instance_);
}
inline const ::graph_pb::Graph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::graph_pb::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_pb.TransportRouter.graph)
}
inline ::graph_pb::Graph* TransportRouter::release_graph() {
  auto temp = unsafe_arena_release_graph();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::graph_pb::Graph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_router_pb.TransportRouter.graph)
  
  ::graph_pb::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::graph_pb::Graph* TransportRouter::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_pb::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::graph_pb::Graph* TransportRouter::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:transport_router_pb.TransportRouter.graph)
  return _internal_mutable_graph();
}
inline void TransportRouter::set_allocated_graph(::graph_pb::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_router_pb.TransportRouter.graph)
}

// .transport_router_pb.RoutingSettings routing_settings = 3;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArena() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
}
inline const ::transport_router_pb::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::transport_router_pb::RoutingSettings* p = routing_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_router_pb::RoutingSettings*>(
      &::transport_router_pb::_RoutingSettings_default_instance_);
}
inline const ::transport_router_pb::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::transport_router_pb::RoutingSettings* routing_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_settings_);
  }
  routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_pb.TransportRouter.routing_settings)
}
inline ::transport_router_pb::RoutingSettings* TransportRouter::release_routing_settings() {
  auto temp = unsafe_arena_release_routing_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_router_pb::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:transport_router_pb.TransportRouter.routing_settings)
  
  ::transport_router_pb::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
  return temp;
}
inline ::transport_router_pb::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_router_pb::RoutingSettings>(GetArena());
    routing_settings_ = p;
  }
  return routing_settings_;
}
inline ::transport_router_pb::RoutingSettings* TransportRouter::mutable_routing_settings() {
  // @@protoc_insertion_point(field_mutable:transport_router_pb.TransportRouter.routing_settings)
  return _internal_mutable_routing_settings();
}
inline void TransportRouter::set_allocated_routing_settings(::transport_router_pb::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_router_pb.TransportRouter.routing_settings)
}

// -------------------------------------------------------------------

// RoutingSettings

// int32 wait_time = 1;
inline void RoutingSettings::clear_wait_time() {
  wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::_internal_wait_time() const {
  return wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::wait_time() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.RoutingSettings.wait_time)
  return _internal_wait_time();
}
inline void RoutingSettings::_internal_set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_time_ = value;
}
inline void RoutingSettings::set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:transport_router_pb.RoutingSettings.wait_time)
}

// double velocity = 2;
inline void RoutingSettings::clear_velocity() {
  velocity_ = 0;
}
inline double RoutingSettings::_internal_velocity() const {
  return velocity_;
}
inline double RoutingSettings::velocity() const {
  // @@protoc_insertion_point(field_get:transport_router_pb.RoutingSettings.velocity)
  return _internal_velocity();
}
inline void RoutingSettings::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void RoutingSettings::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:transport_router_pb.RoutingSettings.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_router_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
