// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "svg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frenderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto;
namespace map_pb {
class OutputSettings;
class OutputSettingsDefaultTypeInternal;
extern OutputSettingsDefaultTypeInternal _OutputSettings_default_instance_;
}  // namespace map_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::map_pb::OutputSettings* Arena::CreateMaybeMessage<::map_pb::OutputSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace map_pb {

// ===================================================================

class OutputSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map_pb.OutputSettings) */ {
 public:
  inline OutputSettings() : OutputSettings(nullptr) {};
  virtual ~OutputSettings();

  OutputSettings(const OutputSettings& from);
  OutputSettings(OutputSettings&& from) noexcept
    : OutputSettings() {
    *this = ::std::move(from);
  }

  inline OutputSettings& operator=(const OutputSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputSettings& operator=(OutputSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputSettings* internal_default_instance() {
    return reinterpret_cast<const OutputSettings*>(
               &_OutputSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputSettings& a, OutputSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputSettings* New() const final {
    return CreateMaybeMessage<OutputSettings>(nullptr);
  }

  OutputSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputSettings& from);
  void MergeFrom(const OutputSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map_pb.OutputSettings";
  }
  protected:
  explicit OutputSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .map_pb.ColorVar color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::map_pb::ColorVar* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_pb::ColorVar >*
      mutable_color_palette();
  private:
  const ::map_pb::ColorVar& _internal_color_palette(int index) const;
  ::map_pb::ColorVar* _internal_add_color_palette();
  public:
  const ::map_pb::ColorVar& color_palette(int index) const;
  ::map_pb::ColorVar* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_pb::ColorVar >&
      color_palette() const;

  // .map_pb.Point bus_label_offset = 7;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::map_pb::Point& bus_label_offset() const;
  ::map_pb::Point* release_bus_label_offset();
  ::map_pb::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::map_pb::Point* bus_label_offset);
  private:
  const ::map_pb::Point& _internal_bus_label_offset() const;
  ::map_pb::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::map_pb::Point* bus_label_offset);
  ::map_pb::Point* unsafe_arena_release_bus_label_offset();

  // .map_pb.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::map_pb::Point& stop_label_offset() const;
  ::map_pb::Point* release_stop_label_offset();
  ::map_pb::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::map_pb::Point* stop_label_offset);
  private:
  const ::map_pb::Point& _internal_stop_label_offset() const;
  ::map_pb::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::map_pb::Point* stop_label_offset);
  ::map_pb::Point* unsafe_arena_release_stop_label_offset();

  // .map_pb.ColorVar underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::map_pb::ColorVar& underlayer_color() const;
  ::map_pb::ColorVar* release_underlayer_color();
  ::map_pb::ColorVar* mutable_underlayer_color();
  void set_allocated_underlayer_color(::map_pb::ColorVar* underlayer_color);
  private:
  const ::map_pb::ColorVar& _internal_underlayer_color() const;
  ::map_pb::ColorVar* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::map_pb::ColorVar* underlayer_color);
  ::map_pb::ColorVar* unsafe_arena_release_underlayer_color();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_label_font_size = 6;
  void clear_bus_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size() const;
  void set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_label_font_size = 8;
  void clear_stop_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size() const;
  void set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:map_pb.OutputSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_pb::ColorVar > color_palette_;
  ::map_pb::Point* bus_label_offset_;
  ::map_pb::Point* stop_label_offset_;
  ::map_pb::ColorVar* underlayer_color_;
  double width_;
  double height_;
  double padding_;
  double line_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size_;
  double underlayer_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OutputSettings

// double width = 1;
inline void OutputSettings::clear_width() {
  width_ = 0;
}
inline double OutputSettings::_internal_width() const {
  return width_;
}
inline double OutputSettings::width() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.width)
  return _internal_width();
}
inline void OutputSettings::_internal_set_width(double value) {
  
  width_ = value;
}
inline void OutputSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.width)
}

// double height = 2;
inline void OutputSettings::clear_height() {
  height_ = 0;
}
inline double OutputSettings::_internal_height() const {
  return height_;
}
inline double OutputSettings::height() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.height)
  return _internal_height();
}
inline void OutputSettings::_internal_set_height(double value) {
  
  height_ = value;
}
inline void OutputSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.height)
}

// double padding = 3;
inline void OutputSettings::clear_padding() {
  padding_ = 0;
}
inline double OutputSettings::_internal_padding() const {
  return padding_;
}
inline double OutputSettings::padding() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.padding)
  return _internal_padding();
}
inline void OutputSettings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void OutputSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.padding)
}

// double line_width = 4;
inline void OutputSettings::clear_line_width() {
  line_width_ = 0;
}
inline double OutputSettings::_internal_line_width() const {
  return line_width_;
}
inline double OutputSettings::line_width() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.line_width)
  return _internal_line_width();
}
inline void OutputSettings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void OutputSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.line_width)
}

// double stop_radius = 5;
inline void OutputSettings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double OutputSettings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double OutputSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.stop_radius)
  return _internal_stop_radius();
}
inline void OutputSettings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void OutputSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.stop_radius)
}

// int32 bus_label_font_size = 6;
inline void OutputSettings::clear_bus_label_font_size() {
  bus_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputSettings::_internal_bus_label_font_size() const {
  return bus_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void OutputSettings::_internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_label_font_size_ = value;
}
inline void OutputSettings::set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.bus_label_font_size)
}

// .map_pb.Point bus_label_offset = 7;
inline bool OutputSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline bool OutputSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline const ::map_pb::Point& OutputSettings::_internal_bus_label_offset() const {
  const ::map_pb::Point* p = bus_label_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_pb::Point*>(
      &::map_pb::_Point_default_instance_);
}
inline const ::map_pb::Point& OutputSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void OutputSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::map_pb::Point* bus_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_pb.OutputSettings.bus_label_offset)
}
inline ::map_pb::Point* OutputSettings::release_bus_label_offset() {
  auto temp = unsafe_arena_release_bus_label_offset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_pb::Point* OutputSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:map_pb.OutputSettings.bus_label_offset)
  
  ::map_pb::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::map_pb::Point* OutputSettings::_internal_mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_pb::Point>(GetArena());
    bus_label_offset_ = p;
  }
  return bus_label_offset_;
}
inline ::map_pb::Point* OutputSettings::mutable_bus_label_offset() {
  // @@protoc_insertion_point(field_mutable:map_pb.OutputSettings.bus_label_offset)
  return _internal_mutable_bus_label_offset();
}
inline void OutputSettings::set_allocated_bus_label_offset(::map_pb::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset)->GetArena();
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:map_pb.OutputSettings.bus_label_offset)
}

// int32 stop_label_font_size = 8;
inline void OutputSettings::clear_stop_label_font_size() {
  stop_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputSettings::_internal_stop_label_font_size() const {
  return stop_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void OutputSettings::_internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_label_font_size_ = value;
}
inline void OutputSettings::set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.stop_label_font_size)
}

// .map_pb.Point stop_label_offset = 9;
inline bool OutputSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool OutputSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline const ::map_pb::Point& OutputSettings::_internal_stop_label_offset() const {
  const ::map_pb::Point* p = stop_label_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_pb::Point*>(
      &::map_pb::_Point_default_instance_);
}
inline const ::map_pb::Point& OutputSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void OutputSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::map_pb::Point* stop_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_pb.OutputSettings.stop_label_offset)
}
inline ::map_pb::Point* OutputSettings::release_stop_label_offset() {
  auto temp = unsafe_arena_release_stop_label_offset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_pb::Point* OutputSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:map_pb.OutputSettings.stop_label_offset)
  
  ::map_pb::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::map_pb::Point* OutputSettings::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_pb::Point>(GetArena());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::map_pb::Point* OutputSettings::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable:map_pb.OutputSettings.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}
inline void OutputSettings::set_allocated_stop_label_offset(::map_pb::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset)->GetArena();
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:map_pb.OutputSettings.stop_label_offset)
}

// .map_pb.ColorVar underlayer_color = 10;
inline bool OutputSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline bool OutputSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline const ::map_pb::ColorVar& OutputSettings::_internal_underlayer_color() const {
  const ::map_pb::ColorVar* p = underlayer_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_pb::ColorVar*>(
      &::map_pb::_ColorVar_default_instance_);
}
inline const ::map_pb::ColorVar& OutputSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void OutputSettings::unsafe_arena_set_allocated_underlayer_color(
    ::map_pb::ColorVar* underlayer_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_pb.OutputSettings.underlayer_color)
}
inline ::map_pb::ColorVar* OutputSettings::release_underlayer_color() {
  auto temp = unsafe_arena_release_underlayer_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_pb::ColorVar* OutputSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:map_pb.OutputSettings.underlayer_color)
  
  ::map_pb::ColorVar* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::map_pb::ColorVar* OutputSettings::_internal_mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_pb::ColorVar>(GetArena());
    underlayer_color_ = p;
  }
  return underlayer_color_;
}
inline ::map_pb::ColorVar* OutputSettings::mutable_underlayer_color() {
  // @@protoc_insertion_point(field_mutable:map_pb.OutputSettings.underlayer_color)
  return _internal_mutable_underlayer_color();
}
inline void OutputSettings::set_allocated_underlayer_color(::map_pb::ColorVar* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color)->GetArena();
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:map_pb.OutputSettings.underlayer_color)
}

// double underlayer_width = 11;
inline void OutputSettings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double OutputSettings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double OutputSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void OutputSettings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void OutputSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:map_pb.OutputSettings.underlayer_width)
}

// repeated .map_pb.ColorVar color_palette = 12;
inline int OutputSettings::_internal_color_palette_size() const {
  return color_palette_.size();
}
inline int OutputSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline ::map_pb::ColorVar* OutputSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:map_pb.OutputSettings.color_palette)
  return color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_pb::ColorVar >*
OutputSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:map_pb.OutputSettings.color_palette)
  return &color_palette_;
}
inline const ::map_pb::ColorVar& OutputSettings::_internal_color_palette(int index) const {
  return color_palette_.Get(index);
}
inline const ::map_pb::ColorVar& OutputSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:map_pb.OutputSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::map_pb::ColorVar* OutputSettings::_internal_add_color_palette() {
  return color_palette_.Add();
}
inline ::map_pb::ColorVar* OutputSettings::add_color_palette() {
  // @@protoc_insertion_point(field_add:map_pb.OutputSettings.color_palette)
  return _internal_add_color_palette();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_pb::ColorVar >&
OutputSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:map_pb.OutputSettings.color_palette)
  return color_palette_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace map_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
